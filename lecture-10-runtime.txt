Рантайм, управление памятью

    В том или ином виде придётся реализовать, потому что в языке появятся (и/или) массивы, строки и S-выражения.

    В прошлый раз обсуждали стек, в этот раз нас интересует динамическая память.

    * Ручное управление -- как в C, хорошо для компилятора, но плохо для всех остальных
        dangling/wild pointers 
        memory leaks
        Эти две проблемы становятся серьёзными в больших проектах.
        Можно словить переполнение памяти при освобождении памяти для какой-нибдудь древовидной структуры, линеаризацию мало кто делает.
        Как избежать? No dynamic memory (Fortran), 

    * Автоматическое управление
        + Упрощает программирование
        + Делает код безопаснее
        + Упрощает программный интерфейс
        + В среднем успоряет выполнение
        + В среднем снижает потребление памяти (потому что аллокатор может быть адаптирован для конкретной стратегии)

        Пул памяти -- базовая область памяти, над которой осуществляется управление.
        Пул устроен очень просто: есть один указатель, который мы двигаем только вперёд при аллокации.
        Например, программный стек -- пул памяти внутренним устройством и с процедурой управления LIFO.
        Использование пулов хорошо тем, что ведёт себя очень предсказуемо, а ещё позволяет быстро освободить весь пул.
        Идеальная ситуация для пула -- объекты одного объекта с одинаковым временем жизни.

        RAII -- вводится отношение владения объектом или областью памяти.

        Куча -- обобщение пула до абсолютно произвольной структуры и процедуры управления.
        Проблемы: внутренняя фрагментация (порождается самой кучей), внешняя фрагментация (не зависит от устройства кучи и не вызывается хранением её структуры и метаданных).
        Для маленьких объектов внутренняя фрагментацией может быть огромной: заголовок ~ размеру объекта.

        При организации кучи можно много всего полезного положить в заголовках, но лучше делать это умеренно, потому что от этого куча сильно раздувается.

        Механизмы управления кучей:

        * Последовательный поиск подходящего блока
            first fit, next fit, best fit, worst fit, good fit, perfect fit (универсальной стратегии для всех программ нет)
            Разные стратегии появились из попытки минимизировать внешнюю фрагментацию кучи (перечисленные справляются плохо, а worst fit и best fit ведут себя почти одинаково).
            Note: worst fit основан на идее, что если стремиться к минимальному оверхеду при аллокации, то порождается много фрагментации.
            Обычно из этих методов используют first или next, не усложняя себе жизнь.

            При последовательном поиске важную роль играет слияние блоков. Хорошую эвристику придумать сложно, поэтому обычно алгоритмы сливают блоки либо всегда, либо никогда.
            Для слияния блоков нужен указатель назад.

            Segregated storage (распределение объектов по размерам) -- делим кучу на блоки разного размера (обычно 2^i) определённым образом, вспомнить hoard allocator.
            Отдельный случай -- распределение объектов по классам, а не размерам. Имеет смысл, потому что нужно хранить меньше метаинформации.
            Позволяет легко параллелить сборку мусора, потому что есть очень много независимых списков.
            Вызывает очень сильную фрагментацию, потому что (обычно) размеры округляются до степеней двойки.

            Асимптотика алгоритмов обычно никого не интересует, потому что счёт идёт на инструкции.

        * Индексированный поиск и поиск в битовом массиве

            Заводится и хранится отдельно карта указателей -- индекс всей памяти, например, в виде bitmap.
            Это хорошо тем, что карта указателей очень локальна и лучше ложится в кэш. Хороший индекс занимает много: иногда до 1/32 кучи.
            Для 4Gb памяти может понадобиться 150Mb для индекса.

            Битовый массив хранит по одному биту на слово или блок в структуре, биты абсолютно линейно отображаются в память.

        Управление памятью:
 
        * Автоматическое управление с ручным выделением
            Можно влиять на выделение, но не на освобождение -- "я хочу десять мегабайт по этому адресу".
            Automatic memory reclamation -- реализация в библиотеке, с ограничениями указательной арифметики и специальным оформлением ссылок.

        * Сборка мусора
            На выделение влиять способов нет или почти нет -- "я хочу память под объект класса MyClass".
            Сборка мусора -- эвристическая попытка найти память, которая не будет использоваться (не может никак получить доступ; хотелось бы находить и такую, к которой _не станет_ получать доступ, но это неразрешимо)

            Internal pointers, roots (static: globals; dynamic: locals, registers), производные ссылки -- все значения, которые могут быть получены по одному адресу (например, итератор может выдавать значения из массива, а ещё instruction pointer при наличии кода в куче).

            Direct pointers vs object handlers: второе -- косвенная адресация кучи через промежуточную таблицу, что даёт очень простое перемещение объектов и сжатие кучи. В некоторых языках по-другому делать было нельзя, потому что предполагалось ещё и переносить код. Сейчас так почти не делают, потому что два перехода по указателям значительно дороже одного -- в 2..8 раз в зависимости от программы.

            Критерии:
            * безопасность типов; type accurate garbage collection
            * критерии по времени работы и памяти (и для программы, и для метаданных)
            * наличие stop the world
            * пространственная и временная локальность (а некоторые сборщики её ухудшают)

            Наблюдение: 80% времени программа выполняет 10% кода (иногда и меньше)

            Базовые Алгоритмы:
            * mark & sweep
            * mark & compact
            * mark & copy

            Финализаторы 
                Очень спорная вещь, а realtime-сборщики их вообще игнорируют, чтобы не увеличивать время сборки мусора произвольным кодом в финализаторах.

            Сборка мусора бывает:
                Подсчёт ссылок VS tracing collection
                Точная VS консервативная
                Непрерывная куча VS кусочная куча (кусочная усложняет проверку принадлежности объекта куче)
                Полная VS выборочная
                Stop-the-world VS incremental

            Подсчёт ссылок -- исторически самый старый алгоритм (1960, LISP), подсчитываем у каждого объекта количество ссылок на него. Простая и понятная концепция и реализация.
                Как правило, можно делать realtime (как только память стала не нужна, она освобождается)
                Увеличивает размер заголовка, может переполняться (а выделять аж по целому слову дорого).
                Присваивание требует две записи в память.
                Плохо согласуется с оптимизациями компилятора.
                Требует синхронизации при параллельной сборке.
                Лавинное освобождение памяти -- дерево с единственной ссылкой на корень, и если умирает корень, то требуется долгая пауза на удаление всего дерева.
                Непредсказуемое время работы даже для элементарных операций.
                (!) Циклический мусор, решается невладеющими (weak) указателями, что требует работы программиста. Рассмотрением циклов в графе объектов решать слишком дорого.
                При подсчёте ссылок можно исключить локальные переменные и параметры, вместо этого, если счётчик обнуляется, сканировать стек.

            Точная (accurate, precise, type-accurate) -- ожидание, что сборщик мусора сможет найти все объекты, до которых у программы нет доступа.
            Консервативная -- некоторое приближение множества снизу. Нельзя дефрагментировать кучу, потому что при перемещении объекта нужно скорректировать указатели на объект. Если не все указатели найдены (или про некоторые значения мы не уверены, что это указатели), то объект нельзя перемещать.

            // Для C++ нельзя построить точный сборщик, потому что есть указатели, неотличимые от значений. Консервативный сборщик мусора Boehm GC для C++ обнаруживает, что некоторые значения _могут быть_ указателями и ведёт себя с ними осторожно.

            Выборочная сборка мусора с поколениями требует полного сканирования старых поколений либо remember set, для работы с которым делается write barrier для каждой записи:
                "если ссылка из старого поколения в новое, запомнить, иначе забыть" ("иначе забыть" можно убрать, получится аппроксимация, а можно вообще не проверять, что ссылка в новое поколение, хранить все для старого поколения; чем проще барьер, тем больше remember set).

                Remember set -- bitmap, modified bits for whole pages, small bits in aligned pointers.

            Гипотезы поколения
                Слабая: большинство объектов умирают молодыми (часто верна, но можно написать программу, чтобы нарушить)
                Сильная: смертность уменьшается с возрастом (статистически не верна)
                Гипотеза радиоактисного распада: смертность _растёт_ с возрастом (обычно верна, кроме вечноживущих объектов)

                Обычно поколений делается два-три, больше -- не даёт преимуществ.

            Concurrent GC
                Позволяет избежать долгой паузы для сборки мусора.
                Коллектор должен освобождать память не медленнее, чем мутатор её ест.
                Требует некоторой синхронизации доступа между мутатором и коллектором.
                Трёхцветный инвариант маркировки: белый -- непросканированный или недоступный, серые -- фронт сканирования.
                Нужно исключить ссылки из чёрных объектов в белые.
                Для сохранения инварианта:
                    либо не давать мутатору доступа к белым объектам (появляется "плавающий мусор", который переживёт сборку, но по идее не более одной, плохо для молодого поколения), 
                    либо не давать мутатору писать "белое в чёрное".
                    snapshot at the beginning -- собираем только тот мусор, который был начало сборки.
                Всегда менее эффективна, чем stop-the-world.

            Корректировка указателей: тривиально в случае object handlers. Иначе:
                * таблица разрывов -- множество пар (что переместилось, на сколько переместилось). Проблемы с хранением таблицы разрывов. Обычно её хранят в конце кучи, а если там места нет, то прямо в промежутках освобождаемой кучи. Требует разбиения, частичного представления, эвакуации.
                * отсылочный указатель: каждый хедер блока памяти снабжаем дополнительным полем -- это адрес, куда перенесён объект, который лежал в этом блоке. Так как дважды так сделать с одним блоком нельзя, нужно при следующей сборке сфорсировать изменение всех указателей на актуальные.

            Also, алгоритмы: алгоритм поезда, мельница Бейкера