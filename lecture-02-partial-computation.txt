Частичные вычисления

	Интересный вид языковых процессоров.
	Метавычисления -- вычисления на программах, "уровень, с которого мы смотрим на программы".

	Уровень описания языков -- метаязыки. Один из метаязыков -- математика.
	В.Ф. Турчин -- физик-ядерщик, основатель метавычислений, создатель языка Рефал, общей теории эволюции.

	Рефал -- язык, в основе которого лежит сопоставление с образцом.

	Метапереход -- ?

	А.П. Ершов -- один из первых программистов со специальным образованием в СССР, корпусная лингвистика, смешанные вычисления.

Язык программирования (по Ершову)

	[| p |]_L in = out 
	"Семантика программы p на языке L: при входных данных in выдаёт out."

	По Ершову, семантика должна быть частично вычислимой функцией.

	Смешанные (частичные) вычисления, mixed computations -- берём исходную программу, а вход разделяем на статический и динамический.
	Статический вход должен использоваться для создания оптимальной программы, работающей с динамическим входом.

	f(in_s, in_d)

	Одношаговое вычисление программы: out = [|p|] [in_s, in_d] -- запуск программы со статическим и динамическим входом в динамике.
	Двухшаговое вычисление: p_spec = [|mix|] [p, in_s]
							out = [|p_spec|] [in_d]

	[|p|]_s [in_s, in_d] = [|  [|mix|] [p, in_s]   |]_t in_d

	mix -- некоторая программа, осуществляющая частичное вычисление программы p со статическим входом in_s и выдаёт программу (возможно, на другом языке), имеющую такую же семантику, как у p с подставленным входом in_s.

	Зачем это делать?
		Иногда функцию, которая часто вызывается с фиксированным параметром, упростить для этого параметра.
		Кроме того, если есть компилятор и интерпретатор, обычно хочется, чтобы время компиляции + выполнения было меньше, чем интерпретации.
		С частичными вычислениями в идеале так же: частичное вычисление и затем запуск должны быть быстрее, чем запуск с полностью динамическим входом. 
		Если это так, то частичные вычисления считаются Jones-optimal.

Проекции Футамуры (Футамуры-Ершова-Турчина)

	Они определяются с помощью определения mix.

	Что будет, если частичному вычислителю mix дать в качестве программы интерпретатор языка, а в качестве статического входа -- код программы?

	Первая проекция

		out = [|sources_S|]_S input =
		    = [| int_L^S |]_L [sources_S, input] =
		    = [|  [|mix|] [int, sources] |] input = 
		    = [|target_L|] input
		    (тут больше индексов)

		Специализация интерпретатора на программу суть код программы на языке реализации интерпретатора. То есть, у интерпретатора можно код программы считать статическими данными, а вход -- динамическими.

	Вторая проекция:

		target_L = [|mix^L_LL|]_LL [ int_L^S, source_S ] =
				 = [|[|mix|] [mix, int]|] source =
				 = [|compiler|] source

		Специализация специализатора на интерпретатор -- компилятор.

		p   ds  dn  mix(p, ds) dn
		int p   d   mix(int, p) d
		mix         mix(mix, int) p

		Если все индексы -- один и тот же язык, то получается, что с интерпретатором и частичным вычислителем языка можно получить компилятор.

	Третья проекция

		Даёт генератор компиляторов -- по интерпретатору генерирует компилятор.

		mix_L^L : [|mix_L^L|] [mix_L^K, int_L^S] = comp_L^(L->S)

		И для генерации компилятора по интерпретатору достаточно самоприменимого частичного вычислителя.

		unmix -- частичный вычислитель, 1987г, генерирует компилятор с естественной структурой

	Писать частичные вычислители, особенно самоприменимые, сложнее, чем компиляторы.

Суперкомпиляция

	Тоже метавычисления, обобщение частичных вычислителей. 
	В некотором смысле нужно сгенерировать оптимальную программу. Вообще задача неразрешимая, но применяют эвристики.
	Особенность суперкомпилятора: если для двух программ p1 и p2 результат компиляции одинаковый, то семантика p1 и p2 эквивалентна.
	Из-за использования эвристик такое происходит нечасто.

	Суперкомпилятор использует прогоны: проходит все возможные пути исполнения программы. Такое дерево потенциально бесконечно.
	Для любых двух путей можно найти в них два состояния, которые можно склеить -- одно из них является обобщением другого.
	"Невозможно бесконечно делать непонятно что, обязательно когда-то получится что-то, похожее на встреченное раньше."

	Суперкомпиляцию можно использовать для верификации программ (применялось на практике для протокола когерентности кэшей): если в программе,
	полученной суперкомпилятором нет веток, приводящих к некорректному результату, то программа корректна. Но, естественно, если программа корректна, то необязательно каким-нибудь суперкомпиятором можно будет это доказать.

Дистилляция

	Частичные вычисления и суперкомпиляция в существующем виде не могут дать более, чем линейное ускорение программ.
	Дистилляция, в отличие от суперкомпиляции, способна изменить структуру программы. Она запускает суперкомпиляцию на графовом представлении программы.
	G.W.Hamilton: превращение квадратичного разворота списка в линейный.

Bootstrapping
	
	Идеологический смысл: есть язык S, мы хотим на нём написать компилятор для большего языка S', и мы хотим постепенно увеличивать S.

	S, S' supset S, forall p in S-programs [|p|]_S = [|p|]_S'
	Компиляторы: h in C_S^(S -> T), t in C_T^(S -> T) согласованы. Хотим получить компилятор h' in C_S^(S' -> T). Сначала расширим h до него консервативно.
	Построим сначала

		t1' = [|t|]_T h' in C_T^(S' -> T)
		t2' = [|t1'|]_T h' in C_T^(S' -> T)
		...
		(см. слайд)

О реализации проекций Футамуры

	(демонстрируется реализация частичного вычислителя для очень маленького языка)

